diff --git a/cm2350/e200z7.py b/cm2350/e200z7.py
index a0b660c..6241c73 100644
--- a/cm2350/e200z7.py
+++ b/cm2350/e200z7.py
@@ -26,6 +26,8 @@ import envi
 import envi.bits as e_bits
 import envi.memory as e_mem
 
+from .grpc_client import grpc_client
+
 # PPC registers
 import envi.archs.ppc.regs as eapr
 from .ppc_vstructs import v_const, v_w1c, v_bits, BitFieldSPR, PpcSprCallbackWrapper
@@ -153,6 +155,8 @@ class PPC_e200z7(mmio.ComplexMemoryMap, vimp_emu.WorkspaceEmulator,
         # Initialize the core PPC emualtor
         eape.Ppc32EmbeddedEmulator.__init__(self, endian=envi.ENDIAN_MSB)
 
+        self.grpc_client = grpc_client.grpc_client(self)
+
         # initialize the core "helper" emulator. WorkspaceEmulator to start, as
         # it provides inspection hooks and tracing which is helpful for
         # debugging. PpcWorkspaceEmulator is the base PPC WorkspaceEmulator with
@@ -841,14 +845,14 @@ class PPC_e200z7(mmio.ComplexMemoryMap, vimp_emu.WorkspaceEmulator,
         self.processIO()
 
         pc = self.getProgramCounter()
+        # do normal opcode parsing and execution
+        op, op_bytes = self._parseOpcode(pc)
+        self.grpc_client.record_instruction(op, op_bytes)
 
         try:
             # See if there are any exceptions that need to start being handled
             self.mcu_intc.checkException()
 
-            # do normal opcode parsing and execution
-            op = self.parseOpcode(pc)
-
             # TODO: check MSR for FP (MSR_FP_MASK) and SPE (MSR_SPE_MASK)
             # support here?
             self.executeOpcode(op)
@@ -966,7 +970,7 @@ class PPC_e200z7(mmio.ComplexMemoryMap, vimp_emu.WorkspaceEmulator,
         # Attempt to clear any instruction cache
         self.clearOpcache(ea, len(bytez))
 
-    def parseOpcode(self, va, arch=envi.ARCH_PPC_E32, skipcache=False, skipcallbacks=False):
+    def _parseOpcode(self, va, arch=envi.ARCH_PPC_E32, skipcache=False, skipcallbacks=False):
         '''
         Combination of the WorkspaceEmulator and the standard envi.memory
         parseOpcode functions that handles translating instruction addresses
@@ -979,8 +983,8 @@ class PPC_e200z7(mmio.ComplexMemoryMap, vimp_emu.WorkspaceEmulator,
         else:
             op = self.opcache[vle].get(ea)
 
+        off, b = mmio.ComplexMemoryMap.getByteDef(self, ea)
         if op is None:
-            off, b = mmio.ComplexMemoryMap.getByteDef(self, ea)
             if vle:
                 op = self._arch_vle_dis.disasm(b, off, va)
             else:
@@ -1004,7 +1008,10 @@ class PPC_e200z7(mmio.ComplexMemoryMap, vimp_emu.WorkspaceEmulator,
         # handling information
         self._cur_instr = (op, va, va+op.size, vle)
 
-        return op
+        return op, b[off:off+4]
+
+    def parseOpcode(self, va, arch=envi.ARCH_PPC_E32, skipcache=False, skipcallbacks=False):
+        return self._parseOpcode(va, arch, skipcache, skipcallbacks)[0]
 
     def _checkReadCallbacks(self, src, addr, data=None, size=0, instr=False):
         '''
diff --git a/requirements.txt b/requirements.txt
index 0ddd64f..d457d92 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,2 +1,5 @@
 ipython>=8.0.0
 -e git+https://github.com/atlas0fd00m/vivisect.git@envi_ppc#egg=vivisect
+grpcio
+protobuf
+lxml

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vivserver.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vivserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vivserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vivserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vivserver_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vivserver_2eproto;
class RunInstructionsReply;
struct RunInstructionsReplyDefaultTypeInternal;
extern RunInstructionsReplyDefaultTypeInternal _RunInstructionsReply_default_instance_;
class RunInstructionsReply_Instruction;
struct RunInstructionsReply_InstructionDefaultTypeInternal;
extern RunInstructionsReply_InstructionDefaultTypeInternal _RunInstructionsReply_Instruction_default_instance_;
class RunInstructionsRequest;
struct RunInstructionsRequestDefaultTypeInternal;
extern RunInstructionsRequestDefaultTypeInternal _RunInstructionsRequest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::RunInstructionsReply* Arena::CreateMaybeMessage<::RunInstructionsReply>(Arena*);
template<> ::RunInstructionsReply_Instruction* Arena::CreateMaybeMessage<::RunInstructionsReply_Instruction>(Arena*);
template<> ::RunInstructionsRequest* Arena::CreateMaybeMessage<::RunInstructionsRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class RunInstructionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RunInstructionsRequest) */ {
 public:
  inline RunInstructionsRequest() : RunInstructionsRequest(nullptr) {}
  ~RunInstructionsRequest() override;
  explicit PROTOBUF_CONSTEXPR RunInstructionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RunInstructionsRequest(const RunInstructionsRequest& from);
  RunInstructionsRequest(RunInstructionsRequest&& from) noexcept
    : RunInstructionsRequest() {
    *this = ::std::move(from);
  }

  inline RunInstructionsRequest& operator=(const RunInstructionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunInstructionsRequest& operator=(RunInstructionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunInstructionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RunInstructionsRequest* internal_default_instance() {
    return reinterpret_cast<const RunInstructionsRequest*>(
               &_RunInstructionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RunInstructionsRequest& a, RunInstructionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RunInstructionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunInstructionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RunInstructionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RunInstructionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RunInstructionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RunInstructionsRequest& from) {
    RunInstructionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunInstructionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RunInstructionsRequest";
  }
  protected:
  explicit RunInstructionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumInstructionsFieldNumber = 1,
  };
  // int32 numInstructions = 1;
  void clear_numinstructions();
  int32_t numinstructions() const;
  void set_numinstructions(int32_t value);
  private:
  int32_t _internal_numinstructions() const;
  void _internal_set_numinstructions(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RunInstructionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t numinstructions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vivserver_2eproto;
};
// -------------------------------------------------------------------

class RunInstructionsReply_Instruction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RunInstructionsReply.Instruction) */ {
 public:
  inline RunInstructionsReply_Instruction() : RunInstructionsReply_Instruction(nullptr) {}
  ~RunInstructionsReply_Instruction() override;
  explicit PROTOBUF_CONSTEXPR RunInstructionsReply_Instruction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RunInstructionsReply_Instruction(const RunInstructionsReply_Instruction& from);
  RunInstructionsReply_Instruction(RunInstructionsReply_Instruction&& from) noexcept
    : RunInstructionsReply_Instruction() {
    *this = ::std::move(from);
  }

  inline RunInstructionsReply_Instruction& operator=(const RunInstructionsReply_Instruction& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunInstructionsReply_Instruction& operator=(RunInstructionsReply_Instruction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunInstructionsReply_Instruction& default_instance() {
    return *internal_default_instance();
  }
  static inline const RunInstructionsReply_Instruction* internal_default_instance() {
    return reinterpret_cast<const RunInstructionsReply_Instruction*>(
               &_RunInstructionsReply_Instruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RunInstructionsReply_Instruction& a, RunInstructionsReply_Instruction& b) {
    a.Swap(&b);
  }
  inline void Swap(RunInstructionsReply_Instruction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunInstructionsReply_Instruction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RunInstructionsReply_Instruction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RunInstructionsReply_Instruction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RunInstructionsReply_Instruction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RunInstructionsReply_Instruction& from) {
    RunInstructionsReply_Instruction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunInstructionsReply_Instruction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RunInstructionsReply.Instruction";
  }
  protected:
  explicit RunInstructionsReply_Instruction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstructionFieldNumber = 1,
    kOpCodeFieldNumber = 2,
  };
  // bytes instruction = 1;
  void clear_instruction();
  const std::string& instruction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instruction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instruction();
  PROTOBUF_NODISCARD std::string* release_instruction();
  void set_allocated_instruction(std::string* instruction);
  private:
  const std::string& _internal_instruction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instruction(const std::string& value);
  std::string* _internal_mutable_instruction();
  public:

  // bytes opCode = 2;
  void clear_opcode();
  const std::string& opcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_opcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_opcode();
  PROTOBUF_NODISCARD std::string* release_opcode();
  void set_allocated_opcode(std::string* opcode);
  private:
  const std::string& _internal_opcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_opcode(const std::string& value);
  std::string* _internal_mutable_opcode();
  public:

  // @@protoc_insertion_point(class_scope:RunInstructionsReply.Instruction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instruction_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vivserver_2eproto;
};
// -------------------------------------------------------------------

class RunInstructionsReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RunInstructionsReply) */ {
 public:
  inline RunInstructionsReply() : RunInstructionsReply(nullptr) {}
  ~RunInstructionsReply() override;
  explicit PROTOBUF_CONSTEXPR RunInstructionsReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RunInstructionsReply(const RunInstructionsReply& from);
  RunInstructionsReply(RunInstructionsReply&& from) noexcept
    : RunInstructionsReply() {
    *this = ::std::move(from);
  }

  inline RunInstructionsReply& operator=(const RunInstructionsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunInstructionsReply& operator=(RunInstructionsReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunInstructionsReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const RunInstructionsReply* internal_default_instance() {
    return reinterpret_cast<const RunInstructionsReply*>(
               &_RunInstructionsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RunInstructionsReply& a, RunInstructionsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RunInstructionsReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunInstructionsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RunInstructionsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RunInstructionsReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RunInstructionsReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RunInstructionsReply& from) {
    RunInstructionsReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunInstructionsReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RunInstructionsReply";
  }
  protected:
  explicit RunInstructionsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RunInstructionsReply_Instruction Instruction;

  // accessors -------------------------------------------------------

  enum : int {
    kInstructionsFieldNumber = 1,
  };
  // repeated .RunInstructionsReply.Instruction instructions = 1;
  int instructions_size() const;
  private:
  int _internal_instructions_size() const;
  public:
  void clear_instructions();
  ::RunInstructionsReply_Instruction* mutable_instructions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RunInstructionsReply_Instruction >*
      mutable_instructions();
  private:
  const ::RunInstructionsReply_Instruction& _internal_instructions(int index) const;
  ::RunInstructionsReply_Instruction* _internal_add_instructions();
  public:
  const ::RunInstructionsReply_Instruction& instructions(int index) const;
  ::RunInstructionsReply_Instruction* add_instructions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RunInstructionsReply_Instruction >&
      instructions() const;

  // @@protoc_insertion_point(class_scope:RunInstructionsReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RunInstructionsReply_Instruction > instructions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vivserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RunInstructionsRequest

// int32 numInstructions = 1;
inline void RunInstructionsRequest::clear_numinstructions() {
  _impl_.numinstructions_ = 0;
}
inline int32_t RunInstructionsRequest::_internal_numinstructions() const {
  return _impl_.numinstructions_;
}
inline int32_t RunInstructionsRequest::numinstructions() const {
  // @@protoc_insertion_point(field_get:RunInstructionsRequest.numInstructions)
  return _internal_numinstructions();
}
inline void RunInstructionsRequest::_internal_set_numinstructions(int32_t value) {
  
  _impl_.numinstructions_ = value;
}
inline void RunInstructionsRequest::set_numinstructions(int32_t value) {
  _internal_set_numinstructions(value);
  // @@protoc_insertion_point(field_set:RunInstructionsRequest.numInstructions)
}

// -------------------------------------------------------------------

// RunInstructionsReply_Instruction

// bytes instruction = 1;
inline void RunInstructionsReply_Instruction::clear_instruction() {
  _impl_.instruction_.ClearToEmpty();
}
inline const std::string& RunInstructionsReply_Instruction::instruction() const {
  // @@protoc_insertion_point(field_get:RunInstructionsReply.Instruction.instruction)
  return _internal_instruction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RunInstructionsReply_Instruction::set_instruction(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instruction_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RunInstructionsReply.Instruction.instruction)
}
inline std::string* RunInstructionsReply_Instruction::mutable_instruction() {
  std::string* _s = _internal_mutable_instruction();
  // @@protoc_insertion_point(field_mutable:RunInstructionsReply.Instruction.instruction)
  return _s;
}
inline const std::string& RunInstructionsReply_Instruction::_internal_instruction() const {
  return _impl_.instruction_.Get();
}
inline void RunInstructionsReply_Instruction::_internal_set_instruction(const std::string& value) {
  
  _impl_.instruction_.Set(value, GetArenaForAllocation());
}
inline std::string* RunInstructionsReply_Instruction::_internal_mutable_instruction() {
  
  return _impl_.instruction_.Mutable(GetArenaForAllocation());
}
inline std::string* RunInstructionsReply_Instruction::release_instruction() {
  // @@protoc_insertion_point(field_release:RunInstructionsReply.Instruction.instruction)
  return _impl_.instruction_.Release();
}
inline void RunInstructionsReply_Instruction::set_allocated_instruction(std::string* instruction) {
  if (instruction != nullptr) {
    
  } else {
    
  }
  _impl_.instruction_.SetAllocated(instruction, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instruction_.IsDefault()) {
    _impl_.instruction_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RunInstructionsReply.Instruction.instruction)
}

// bytes opCode = 2;
inline void RunInstructionsReply_Instruction::clear_opcode() {
  _impl_.opcode_.ClearToEmpty();
}
inline const std::string& RunInstructionsReply_Instruction::opcode() const {
  // @@protoc_insertion_point(field_get:RunInstructionsReply.Instruction.opCode)
  return _internal_opcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RunInstructionsReply_Instruction::set_opcode(ArgT0&& arg0, ArgT... args) {
 
 _impl_.opcode_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RunInstructionsReply.Instruction.opCode)
}
inline std::string* RunInstructionsReply_Instruction::mutable_opcode() {
  std::string* _s = _internal_mutable_opcode();
  // @@protoc_insertion_point(field_mutable:RunInstructionsReply.Instruction.opCode)
  return _s;
}
inline const std::string& RunInstructionsReply_Instruction::_internal_opcode() const {
  return _impl_.opcode_.Get();
}
inline void RunInstructionsReply_Instruction::_internal_set_opcode(const std::string& value) {
  
  _impl_.opcode_.Set(value, GetArenaForAllocation());
}
inline std::string* RunInstructionsReply_Instruction::_internal_mutable_opcode() {
  
  return _impl_.opcode_.Mutable(GetArenaForAllocation());
}
inline std::string* RunInstructionsReply_Instruction::release_opcode() {
  // @@protoc_insertion_point(field_release:RunInstructionsReply.Instruction.opCode)
  return _impl_.opcode_.Release();
}
inline void RunInstructionsReply_Instruction::set_allocated_opcode(std::string* opcode) {
  if (opcode != nullptr) {
    
  } else {
    
  }
  _impl_.opcode_.SetAllocated(opcode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.opcode_.IsDefault()) {
    _impl_.opcode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RunInstructionsReply.Instruction.opCode)
}

// -------------------------------------------------------------------

// RunInstructionsReply

// repeated .RunInstructionsReply.Instruction instructions = 1;
inline int RunInstructionsReply::_internal_instructions_size() const {
  return _impl_.instructions_.size();
}
inline int RunInstructionsReply::instructions_size() const {
  return _internal_instructions_size();
}
inline void RunInstructionsReply::clear_instructions() {
  _impl_.instructions_.Clear();
}
inline ::RunInstructionsReply_Instruction* RunInstructionsReply::mutable_instructions(int index) {
  // @@protoc_insertion_point(field_mutable:RunInstructionsReply.instructions)
  return _impl_.instructions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RunInstructionsReply_Instruction >*
RunInstructionsReply::mutable_instructions() {
  // @@protoc_insertion_point(field_mutable_list:RunInstructionsReply.instructions)
  return &_impl_.instructions_;
}
inline const ::RunInstructionsReply_Instruction& RunInstructionsReply::_internal_instructions(int index) const {
  return _impl_.instructions_.Get(index);
}
inline const ::RunInstructionsReply_Instruction& RunInstructionsReply::instructions(int index) const {
  // @@protoc_insertion_point(field_get:RunInstructionsReply.instructions)
  return _internal_instructions(index);
}
inline ::RunInstructionsReply_Instruction* RunInstructionsReply::_internal_add_instructions() {
  return _impl_.instructions_.Add();
}
inline ::RunInstructionsReply_Instruction* RunInstructionsReply::add_instructions() {
  ::RunInstructionsReply_Instruction* _add = _internal_add_instructions();
  // @@protoc_insertion_point(field_add:RunInstructionsReply.instructions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RunInstructionsReply_Instruction >&
RunInstructionsReply::instructions() const {
  // @@protoc_insertion_point(field_list:RunInstructionsReply.instructions)
  return _impl_.instructions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vivserver_2eproto
